package com.pstanoev

import com.typesafe.config.Config
import com.typesafe.config.ConfigValue
import com.squareup.kotlinpoet.*

class ConfigToolKotlin {
	
	public static void configureAppKotlin(Config modulesConfig, File configFile, File projectRootDirectory, boolean debug) {
	
	    for (String outputName : modulesConfig.root().keySet()) {
	       
	        // println "Output " + outputName
	        Config outputRootConfig = modulesConfig.getConfig(outputName)
	        boolean enabled = outputRootConfig.hasPath("enabled") ? outputRootConfig.getBoolean("enabled") : true
	        if (!enabled) {
	            if (debug) {
	              println "Output " + outputName + " is disabled"       
	            }
	            continue
	        }
	        Config moduleOutputConfig = outputRootConfig.getConfig("output")
	        Config moduleConfig = outputRootConfig.getConfig("config")
	
	        String configOutputFileDir = moduleOutputConfig.getString("dir")
	        String configOutputFilePackage = moduleOutputConfig.getString("package")
	        String configOutputFileClassName = moduleOutputConfig.getString("className")
	
	        File configOutputDirectory = new File(projectRootDirectory, configOutputFileDir)
	
	        TypeSpec.Builder builder = createkConfigurationProviderClassBuilder(
	                configOutputFileClassName, configFile.getName())
	
	        ClassName configClassName = new ClassName(configOutputFilePackage, configOutputFileClassName)
	
	        for (Map.Entry<String, ConfigValue> e : moduleConfig.entrySet()) {
	            String key = e.key
	            ConfigValue value = e.value
	            def valueUnwrapped = value.unwrapped()
	            if(debug) {
	              println key + " = " + value + " : " + valueUnwrapped
	            }
	            if (valueUnwrapped instanceof String) {
	                addConfigFieldString(builder, key, valueUnwrapped)
	            } else if (valueUnwrapped instanceof Boolean) {
	                addConfigFieldBoolean(builder, key, valueUnwrapped)
	            } else if (valueUnwrapped instanceof Long) {
	                addConfigFieldLong(builder, key, valueUnwrapped)
	            } else if (valueUnwrapped instanceof Integer) {
	                addConfigFieldInt(builder, key, valueUnwrapped)
	            } else if (valueUnwrapped instanceof Double) {
	                addConfigFieldDouble(builder, key, valueUnwrapped)
	            } else if (valueUnwrapped instanceof List) {
	                addConfigFieldList(builder, key, valueUnwrapped)
	            }
	
	        }
	
	        // generate Configuration code
	        String filename = configClassName.getSimpleName()
	        FileSpec configurationKotlinCode = generateConfigurationClassKotlinCode(configOutputFilePackage, filename, builder)
	
	        // write Configuration code to actual kotlin file
	        File outputFile = new File(configOutputDirectory, configurationKotlinCode.toJavaFileObject().getName())
	        println("MojoConfig: Writing $outputFile")
	        configurationKotlinCode.writeTo(configOutputDirectory)
	    }
	
	}
	
	private static TypeSpec.Builder createkConfigurationProviderClassBuilder(String className, String configFilename) {
	    TypeSpec.Builder builder = TypeSpec.objectBuilder(className)
	            .addModifiers(com.squareup.kotlinpoet.KModifier.PUBLIC)
	
	    builder.addKdoc(
	            "This configuration was generated by the MojoConfig tool from the configuration file: \n'" +
	                    configFilename + "'.\n")
	
	    return builder
	}
	
	private static void addConfigFieldList(TypeSpec.Builder configClassBuilder, String fieldName, List<Object> fieldValue) {
	    CodeBlock.Builder builder = CodeBlock.builder()
	    builder = builder.add('listOf(')
	
	    ClassName valueClassName = null
	    for (int i = 0; i < fieldValue.size(); i++) {
	        Object fieldValueObject = fieldValue.get(i)
	        if (i > 0) {
	            builder.add(', ')
	        }
	        Object value
	        if (fieldValueObject instanceof ConfigValue) {
	            value = fieldValueObject.unwrapped()
	        } else {
	            value = fieldValueObject
	        }
	
	        if (value instanceof String) {
	            builder.add('"%L"', value)
	        } else {
	            builder.add('%L', value)
	        }
	
	        if (value instanceof String) {
	            valueClassName = new ClassName("kotlin", "String")
	        } else if (value instanceof Boolean) {
	            valueClassName = new ClassName("kotlin", "Boolean")
	        } else if (value instanceof Integer) {
	            valueClassName = new ClassName("kotlin", "Int")
	        } else if (value instanceof Long) {
	            valueClassName = new ClassName("kotlin", "Long")
	        } else {
	            throw new IllegalArgumentException("MojoConfig: Unhandled list value type in config: " + value.getClass().getName())
	        }
	    }
	
	    builder = builder.add(')')
	    CodeBlock value = builder.build()
	
	    ClassName kotlinListClassName = new ClassName("kotlin.collections", "List")
	    TypeName listType = ParameterizedTypeName.get(kotlinListClassName, valueClassName)
	
	    addConfigField(configClassBuilder, fieldName, listType, value, false)
	}
	
	// endregion
	
	// region helper methods
	
	private static void addConfigFieldString(TypeSpec.Builder configClassBuilder, String fieldName, String fieldValue) {
	    CodeBlock value = CodeBlock.builder().add('"%L"', fieldValue).build()
	    addConfigField(configClassBuilder, fieldName, new ClassName("kotlin", "String"), value, true)
	}
	
	private static void addConfigFieldBoolean(TypeSpec.Builder configClassBuilder, String fieldName, boolean fieldValue) {
	    CodeBlock value = CodeBlock.builder().add('%L', fieldValue).build()
	    addConfigField(configClassBuilder, fieldName, new ClassName("kotlin", "Boolean"), value, true)
	}
	
	private static void addConfigFieldLong(TypeSpec.Builder configClassBuilder, String fieldName, long fieldValue) {
	    CodeBlock value = CodeBlock.builder().add('%L%L', fieldValue, "L").build()
	    addConfigField(configClassBuilder, fieldName, new ClassName("kotlin", "Long"), value, true)
	}
	
	private static void addConfigFieldInt(TypeSpec.Builder configClassBuilder, String fieldName, int fieldValue) {
	    CodeBlock value = CodeBlock.builder().add('%L', fieldValue).build()
	    addConfigField(configClassBuilder, fieldName, new ClassName("kotlin", "Int"), value, true)
	}
	
	
	private static void addConfigFieldDouble(TypeSpec.Builder configClassBuilder, String fieldName, double fieldValue) {
	    CodeBlock value = CodeBlock.builder().add('%L', fieldValue).build()
	    addConfigField(configClassBuilder, fieldName, new ClassName("kotlin", "Double"), value, true)
	}
	
	private static void addConfigField(TypeSpec.Builder configClassBuilder, String fieldName, Object fieldType, CodeBlock fieldValue, boolean constant) {
	    PropertySpec.Builder fieldBuilder
	
	    com.squareup.kotlinpoet.KModifier[] modifiers = constant ? [com.squareup.kotlinpoet.KModifier.CONST] : []
	    if (fieldType instanceof java.lang.reflect.Type) {
	        java.lang.reflect.Type type = (java.lang.reflect.Type) fieldType
	        fieldBuilder = PropertySpec.builder(fieldName, type, type)
	    } else {
	        TypeName typeName = (TypeName) fieldType
	        fieldBuilder = PropertySpec.builder(fieldName, typeName, modifiers)
	    }
	
	    if (fieldValue != null) {
	        fieldBuilder = fieldBuilder.initializer(fieldValue)
	    }
	    configClassBuilder.addProperty(fieldBuilder.build())
	}
	
	private static FileSpec generateConfigurationClassKotlinCode(String classPackage, String filename, TypeSpec.Builder configClassBuilder) {
	    FileSpec.Builder fileSpecBuilder = FileSpec.builder(classPackage, filename)
	
	
	    // add comment
	    fileSpecBuilder.addComment("Generated configuration file. Do not modify!")
	
	    // build config provider class specification
	    TypeSpec configurationClassSpec = configClassBuilder.build()
	    fileSpecBuilder.addType(configurationClassSpec)
	
	    // build config provider class  file
	    return fileSpecBuilder.build()
	}
	
	// endregion

}